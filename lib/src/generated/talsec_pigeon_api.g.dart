// Autogenerated from Pigeon (v22.4.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

List<Object?> wrapResponse(
    {Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

class PackageInfo {
  PackageInfo({
    required this.packageName,
    this.appIcon,
    this.appName,
    this.version,
    this.installationSource,
  });

  String packageName;

  String? appIcon;

  String? appName;

  String? version;

  String? installationSource;

  Object encode() {
    return <Object?>[
      packageName,
      appIcon,
      appName,
      version,
      installationSource,
    ];
  }

  static PackageInfo decode(Object result) {
    result as List<Object?>;
    return PackageInfo(
      packageName: result[0]! as String,
      appIcon: result[1] as String?,
      appName: result[2] as String?,
      version: result[3] as String?,
      installationSource: result[4] as String?,
    );
  }
}

class SuspiciousAppInfo {
  SuspiciousAppInfo({
    required this.packageInfo,
    required this.reason,
  });

  PackageInfo packageInfo;

  String reason;

  Object encode() {
    return <Object?>[
      packageInfo,
      reason,
    ];
  }

  static SuspiciousAppInfo decode(Object result) {
    result as List<Object?>;
    return SuspiciousAppInfo(
      packageInfo: result[0]! as PackageInfo,
      reason: result[1]! as String,
    );
  }
}

class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    } else if (value is PackageInfo) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is SuspiciousAppInfo) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129:
        return PackageInfo.decode(readValue(buffer)!);
      case 130:
        return SuspiciousAppInfo.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class TalsecPigeonApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  void onMalwareDetected(List<SuspiciousAppInfo> packageInfo);

  static void setUp(
    TalsecPigeonApi? api, {
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) {
    messageChannelSuffix =
        messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<
          Object?> pigeonVar_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.freerasp.TalsecPigeonApi.onMalwareDetected$messageChannelSuffix',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.freerasp.TalsecPigeonApi.onMalwareDetected was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final List<SuspiciousAppInfo>? arg_packageInfo =
              (args[0] as List<Object?>?)?.cast<SuspiciousAppInfo>();
          assert(arg_packageInfo != null,
              'Argument for dev.flutter.pigeon.freerasp.TalsecPigeonApi.onMalwareDetected was null, expected non-null List<SuspiciousAppInfo>.');
          try {
            api.onMalwareDetected(arg_packageInfo!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
